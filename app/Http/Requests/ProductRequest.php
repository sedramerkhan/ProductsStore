<?php

namespace App\Http\Requests;

use App\Http\Json\JsonResponse;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Validation\ValidationException;
use Psy\Util\Json;

class ProductRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        $user =auth('user')->user();
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        return [
                'name' => 'required|string|max:15',
                'category' => 'required|string|max:25',
                'price' => 'required|numeric'
            ]
            +
            ($this->isMethod('POST') ? $this->store() : $this->update());
    }

    protected function failedValidation(Validator $validator)
    {
        if ($this->expectsJson()) {
//            $errors = (new ValidationException($validator))->errors();
            throw new HttpResponseException(
                JsonResponse::validationError($validator->errors())
            );
        }

//        parent::failedValidation($validator);

//        return JsonResponse::failure($message ='Error',$code=401,$validator->errors());
    }

//    public function messages()
//    {
//        return [
//            'required' => "hello"
//        ];
//        // TODO: Change the autogenerated stub
//    }

    protected function store()
    {
        return [];
    }

    protected function update()
    {
        return [];
    }
}
